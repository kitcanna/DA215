
lab4_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013dc  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db3  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000817  00000000  00000000  0000254f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066e  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055e  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e1       	ldi	r30, 0x14	; 20
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 30       	cpi	r26, 0x00	; 0
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  e2:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <delay_s>:
;==============================================================================
; delay of ca 1s (including RCALL)
;	IN		RVAL = R24
;==============================================================================
delay_s:
	LDI		R24, 250 
  ea:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
  ec:	1e d0       	rcall	.+60     	; 0x12a <delay_ms>
	LDI		R24, 250 
  ee:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
  f0:	1c d0       	rcall	.+56     	; 0x12a <delay_ms>
	LDI		R24, 250 
  f2:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
  f4:	1a d0       	rcall	.+52     	; 0x12a <delay_ms>
	LDI		R24, 250 
  f6:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
  f8:	18 d0       	rcall	.+48     	; 0x12a <delay_ms>
	LDI		R24, 250 
  fa:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
  fc:	16 d0       	rcall	.+44     	; 0x12a <delay_ms>
	LDI		R24, 250 
  fe:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL	delay_ms
 100:	14 d0       	rcall	.+40     	; 0x12a <delay_ms>
	RET
 102:	08 95       	ret

00000104 <delay_ay>:
	...
	NOP
	NOP
	NOP
	NOP
	
	RET
 10c:	08 95       	ret

0000010e <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP			; vi la till 8st dvs totalt 16

	RET
 11e:	08 95       	ret

00000120 <delay_micros>:
; Delay of 1 Âµs // 16-4 = 12 cyklar i hela rutinen under 
; Felmarginal har stor pÃ¥verkan vid upphov till en liten fÃ¶rdrÃ¶jning 
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_micros:   /* UPPGIFT: komplettera med ett antal NOP-instruktioner!!! */
	RCALL delay_ay
 120:	f1 df       	rcall	.-30     	; 0x104 <delay_ay>
	DEC R24
 122:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 124:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 126:	e1 f7       	brne	.-8      	; 0x120 <delay_micros>
	RET
 128:	08 95       	ret

0000012a <delay_ms>:
; Delay of 1 ms
; Felmarginal kan fÃ¶rsummas vid upphov till stor fÃ¶rdrÃ¶jning
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R19, R24
 12a:	38 2f       	mov	r19, r24

0000012c <loop_dms>:
loop_dms:
	LDI R24, 250
 12c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 12e:	f8 df       	rcall	.-16     	; 0x120 <delay_micros>
	LDI R24, 250
 130:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 132:	f6 df       	rcall	.-20     	; 0x120 <delay_micros>
	LDI R24, 250
 134:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 136:	f4 df       	rcall	.-24     	; 0x120 <delay_micros>
	LDI R24, 250
 138:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 13a:	f2 df       	rcall	.-28     	; 0x120 <delay_micros>
	DEC R19
 13c:	3a 95       	dec	r19
	CPI R19, 0			; more loops to do?
 13e:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_dms		;	continue!
 140:	a9 f7       	brne	.-22     	; 0x12c <loop_dms>
	RET
 142:	08 95       	ret

00000144 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 144:	0e 94 a7 00 	call	0x14e	; 0x14e <numkey_init>
	lcd_init();
 148:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>
 14c:	08 95       	ret

0000014e <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 14e:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 150:	80 ef       	ldi	r24, 0xF0	; 240
 152:	84 b9       	out	0x04, r24	; 4
 154:	08 95       	ret

00000156 <main>:
	OÄNDLIG LOOP I SLUTET!
	
	NÄR DET ÄR DAGS ATT TESTA HUVUDPROGRAMMET KOMMENTERAR NI UT (ELLER RADERAR)
	ER TESTKOD. GLÖM INTE ATT AVKOMMENTERA HUVUDPROGRAMMET
******************************************************************************/
	hmi_init();
 156:	0e 94 a2 00 	call	0x144	; 0x144 <hmi_init>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x4>

0000015c <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 15c:	91 b3       	in	r25, 0x11	; 17
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 166:	5f 9a       	sbi	0x0b, 7	; 11
	delay_1_micros();
 168:	0e 94 87 00 	call	0x10e	; 0x10e <delay_1_micros>
	CLR_BIT(PORTD, 7);
 16c:	5f 98       	cbi	0x0b, 7	; 11
 16e:	08 95       	ret

00000170 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 170:	cf 93       	push	r28
 172:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 174:	81 11       	cpse	r24, r1
 176:	02 c0       	rjmp	.+4      	; 0x17c <lcd_write+0xc>
		CLR_BIT(PORTD, 6);	// Instruction Register
 178:	5e 98       	cbi	0x0b, 6	; 11
 17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_write+0xe>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 17c:	5e 9a       	sbi	0x0b, 6	; 11
	}
	// write data
	write_4bit_msb(data);
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	write_4bit_msb(data << 4);
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	delay_micros(45);
 18e:	8d e2       	ldi	r24, 0x2D	; 45
 190:	0e 94 90 00 	call	0x120	; 0x120 <delay_micros>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>
	delay_ms(2);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 95 00 	call	0x12a	; 0x12a <delay_ms>
 1a6:	08 95       	ret

000001a8 <lcd_set_cursor_mode>:
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
	lcd_write(INSTRUCTION, cursor_mode);
 1a8:	68 2f       	mov	r22, r24
 1aa:	6c 60       	ori	r22, 0x0C	; 12
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>
 1b2:	08 95       	ret

000001b4 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 1b4:	80 ef       	ldi	r24, 0xF0	; 240
 1b6:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 1b8:	80 ec       	ldi	r24, 0xC0	; 192
 1ba:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 1bc:	84 e1       	ldi	r24, 0x14	; 20
 1be:	0e 94 95 00 	call	0x12a	; 0x12a <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 1c2:	5e 98       	cbi	0x0b, 6	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	delay_ms(10);
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <delay_ms>
	write_4bit_msb(0x30);
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	delay_ms(10);
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
 1d8:	0e 94 95 00 	call	0x12a	; 0x12a <delay_ms>
	write_4bit_msb(0x30);
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	delay_ms(10);
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	0e 94 95 00 	call	0x12a	; 0x12a <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	0e 94 ae 00 	call	0x15c	; 0x15c <write_4bit_msb>
	delay_micros(45);
 1ee:	8d e2       	ldi	r24, 0x2D	; 45
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 1f4:	68 e2       	ldi	r22, 0x28	; 40
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 202:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
